name: .NET 项目构建与发布

on:
  push:
    branches:
      #- 'main' # 建议您继续保持对主要分支的监听，减少不必要的版本和发布。
      - '**'
      # - 'release/**' # 如果有专门的发布分支

jobs:
  build-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write # 显式授予对仓库内容的写入权限，用于创建标签和 Release

    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # GitVersion 需要完整的 Git 历史来计算版本

      - name: 设置 .NET 环境
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: 安装 GitVersion
        uses: gittools/actions/gitversion/setup@v0.11.0 # 确保使用最新的稳定版本，可以去GitHub仓库查看
        with:
          versionSpec: '5.x' # 这一行是关键，确保它存在且缩进正确

      - name: 获取 GitVersion
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.11.0 # 检查最新版本
        with:
          targetPath: '.'

      - name: 显示版本号
        run: |
          echo "语义化版本号: ${{ steps.gitversion.outputs.semVer }}"
          echo "完整版本号: ${{ steps.gitversion.outputs.fullSemVer }}"

      - name: 恢复依赖项
        # 通常针对解决方案文件进行 restore 即可，它会恢复所有项目的依赖
        run: dotnet restore ./project.sln

      # 构建 Release 版本
      - name: 构建 Release 版本
        # 明确指定要构建的 .csproj 文件路径，并移除 --output 参数
        run: dotnet build src/PropHunt.csproj --configuration Release --no-restore

      # 发布 Release 版本
      - name: 发布 Release 版本
        run: dotnet publish src/PropHunt.csproj --configuration Release --no-restore --output ./publish/Release

      - name: 打包 Release 插件文件
        run: |
          PLUGIN_NAME="PropHunt"
          mkdir -p artifacts
          zip -r "artifacts/${PLUGIN_NAME}-Release-v${{ steps.gitversion.outputs.semVer }}.zip" ./src/bin/Release/net8.0/
          echo "打包文件: artifacts/${PLUGIN_NAME}-Release-v${{ steps.gitversion.outputs.semVer }}.zip 已创建"

      # 构建 Debug 版本
      - name: 构建 Debug 版本
        # 明确指定要构建的 .csproj 文件路径，并移除 --output 参数
        run: dotnet build src/PropHunt.csproj --configuration Debug --no-restore

      # 发布 Debug 版本
      - name: 发布 Debug 版本
        # 明确指定要发布的 .csproj 文件路径
        run: dotnet publish src/PropHunt.csproj --configuration Debug --no-restore --output ./publish/Debug

      - name: 打包发布文件
        run: | # 注意这里的管道符 `|`，它表示接下来的多行都是一个单命令字符串
          PLUGIN_NAME="PropHunt" # 根据您的项目名称设置

          # 确保 artifacts 目录存在
          mkdir -p artifacts

          # 打包 Release 版本
          zip -r "artifacts/${PLUGIN_NAME}-Release-v${{ steps.gitversion.outputs.semVer }}.zip" ./publish/Release/
          echo "打包文件: artifacts/${PLUGIN_NAME}-Release-v${{ steps.gitversion.outputs.semVer }}.zip 已创建"

          # 打包 Debug 版本
          zip -r "artifacts/${PLUGIN_NAME}-Debug-v${{ steps.gitversion.outputs.semVer }}.zip" ./publish/Debug/
          echo "打包文件: artifacts/${PLUGIN_NAME}-Debug-v${{ steps.gitversion.outputs.semVer }}.zip 已创建"

      - name: 生成并推送发布标签
        id: create_tag
        run: |
          TAG_NAME="v${{ steps.gitversion.outputs.semVer }}"
          echo "即将生成的标签名称: $TAG_NAME"
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          if git ls-remote origin refs/tags/$TAG_NAME | grep -q $TAG_NAME; then
            echo "警告：标签 $TAG_NAME 已存在于远程仓库。跳过标签创建和推送。"
          else
            echo "正在创建并推送新标签: $TAG_NAME"
            git tag $TAG_NAME
            git push origin $TAG_NAME
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 创建 GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG_NAME }}
          generate_release_notes: true
          files: |
            ./artifacts/*.zip # 上传 artifacts 目录下的所有 .zip 文件
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
