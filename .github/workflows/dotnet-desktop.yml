name: .NET 项目构建与发布

on:
  push:
    branches:
      - '**'

jobs:
  build-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 设置 .NET 环境
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: 安装 GitVersion
        uses: gittools/actions/gitversion/setup@v0.11.0
        with:
          versionSpec: '5.x'

      - name: 获取 GitVersion
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.11.0
        with:
          targetPath: '.'

      - name: 显示版本号
        run: |
          echo "语义化版本号: ${{ steps.gitversion.outputs.semVer }}"
          echo "完整版本号: ${{ steps.gitversion.outputs.fullSemVer }}"

      - name: 恢复依赖项
        run: dotnet restore ./project.sln

      - name: 构建并发布 Release 版本
        run: dotnet publish src/PropHunt.csproj --configuration Release --no-restore

      - name: 打包 Release 插件产物
        run: |
          PLUGIN_NAME="PropHunt"
          VERSION="${{ steps.gitversion.outputs.semVer }}"
          mkdir -p artifacts
          # 复制 publish 到一个新目录 cs2-prophunt
          cp -r ./src/bin/Release/net8.0/publish ./cs2-prophunt
          # 打包 cs2-prophunt 目录
          zip -r artifacts/${PLUGIN_NAME}-Release-v${VERSION}.zip cs2-prophunt
          echo "打包完成: artifacts/${PLUGIN_NAME}-Release-v${VERSION}.zip"

      - name: 生成并推送发布标签
        id: create_tag
        run: |
          TAG_NAME="v${{ steps.gitversion.outputs.semVer }}"
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          if git ls-remote origin refs/tags/$TAG_NAME | grep -q $TAG_NAME; then
            echo "标签 $TAG_NAME 已存在，跳过。"
          else
            git tag $TAG_NAME
            git push origin $TAG_NAME
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 创建 GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG_NAME }}
          generate_release_notes: true
          files: artifacts/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
